/* ============================================================
   Objetivo:
   - Reportar POR VARIABLE (filas) el total de registros, cuántos
     están completos, cuántos faltan y cuántos no cumplen criterio.
   - Agregado solo por tipo_persona (NO usa compañía en la salida).
   - Oracle DB.
   ============================================================ */

WITH 
/* ============================================================
   1) CTE CORREOS_UNIFICADOS
   - Consolida un (1) correo por cliente (PN/PJ) cuando contenga '@'.
   ============================================================ */
CORREOS_UNIFICADOS AS (
  SELECT 
    n.numero_documento AS numero_documento,
    n.tipdoc_codigo    AS tipo_documento,
    MIN(mcn.descripcion) AS correo_unificado
  FROM naturales n
  JOIN medios_comunicacion mcn 
    ON mcn.nat_secuencia = n.secuencia
  JOIN tipos_medios_comunicacion tmcn 
    ON tmcn.secuencia = mcn.tipmedcom_codigo
  WHERE tmcn.descripcion LIKE '%EMAIL%'
    AND mcn.descripcion  LIKE '%@%'
  GROUP BY n.numero_documento, n.tipdoc_codigo

  UNION

  SELECT 
    j.numero_documento AS numero_documento,
    j.tipdoc_codigo    AS tipo_documento,
    MIN(mcj.descripcion) AS correo_unificado
  FROM juridicos j
  JOIN medios_comunicacion mcj 
    ON mcj.jur_secuencia = j.secuencia
  JOIN tipos_medios_comunicacion tmcj
    ON tmcj.secuencia = mcj.tipmedcom_codigo
  WHERE tmcj.descripcion LIKE '%EMAIL%'
    AND mcj.descripcion  LIKE '%@%'
  GROUP BY j.numero_documento, j.tipdoc_codigo
),

/* ============================================================
   2) CTE POLIZA_UNICA
   - Selecciona, por cliente, una póliza vigente (excluye ramo 315).
   ============================================================ */
POLIZA_UNICA AS (
  SELECT *
  FROM (
    SELECT 
      a.COD_CIA,
      a.tdoc_tercero,
      a.nro_documto,
      a.NUM_POL1,
      a.cod_ramo,
      a.COD_SECC,
      a.FECHA_VENC_POL,
      ROW_NUMBER() OVER (
        PARTITION BY a.COD_CIA, a.tdoc_tercero, a.nro_documto 
        ORDER BY a.FECHA_VENC_POL ASC NULLS LAST
      ) AS rn
    FROM A2000030 a
    WHERE a.FECHA_VENC_POL >= SYSDATE
  )
  WHERE rn = 1
    AND COD_RAMO != 315
),

/* ============================================================
   3) CTE CELULAR_UNIFICADO
   - Unifica celular (10 dígitos) por cliente PN/PJ.
   ============================================================ */
CELULAR_UNIFICADO AS (
  SELECT *
  FROM (
    /* PJ: celular del representante o propio (10 dígitos) */
    SELECT 
      j.numero_documento AS numero_documento,
      j.tipdoc_codigo    AS tipo_documento,
      CASE
        WHEN REGEXP_LIKE(TRIM(mcn.descripcion), '^[0-9]{10}$') THEN TRIM(mcn.descripcion)
        WHEN REGEXP_LIKE(TRIM(mcj.descripcion), '^[0-9]{10}$') THEN TRIM(mcj.descripcion)
        ELSE NULL
      END AS celular_unificado,
      ROW_NUMBER() OVER (
        PARTITION BY j.tipdoc_codigo, j.numero_documento
        ORDER BY j.numero_documento
      ) AS rn
    FROM juridicos j
    JOIN naturales n
      ON n.numero_documento = j.numero_documento_representante
     AND n.tipdoc_codigo   = j.tipdoc_codigo_identificado_por
    JOIN medios_comunicacion mcn
      ON mcn.nat_secuencia = n.secuencia
    JOIN tipos_medios_comunicacion tmcn
      ON tmcn.secuencia = mcn.tipmedcom_codigo
    JOIN medios_comunicacion mcj
      ON mcj.jur_secuencia = j.secuencia
    JOIN tipos_medios_comunicacion tmcj
      ON tmcj.secuencia = mcj.tipmedcom_codigo
    WHERE (tmcn.descripcion LIKE '%CELULAR%' OR tmcj.descripcion LIKE '%CELULAR%')

    UNION ALL

    /* PN: celular (10 dígitos) */
    SELECT 
      n.numero_documento,
      n.tipdoc_codigo,
      CASE 
        WHEN REGEXP_LIKE(TRIM(mcn.descripcion), '^[0-9]{10}$') THEN TRIM(mcn.descripcion)
        ELSE NULL
      END AS celular_unificado,
      ROW_NUMBER() OVER (
        PARTITION BY n.tipdoc_codigo, n.numero_documento
        ORDER BY n.numero_documento
      ) AS rn
    FROM naturales n
    JOIN medios_comunicacion mcn ON mcn.nat_secuencia = n.secuencia
    JOIN tipos_medios_comunicacion tmcn ON tmcn.secuencia = mcn.tipmedcom_codigo
    WHERE tmcn.descripcion LIKE '%CELULAR%'
  )
  WHERE rn = 1
),

/* ============================================================
   4) CTE BASE
   - Universo de clientes con variables a evaluar.
   - Nota: aquí NO seleccionamos compañía, y en la salida tampoco.
   ============================================================ */
BASE AS (
  SELECT 
    m.exrf_cod_tipo_persona AS tipo_persona,
    m.exrf_cod_tip_doc      AS cod_tipo_doc,  
    m.exrf_num_id_cliente   AS num_id,

    REPLACE(TRIM(m.exrf_nombre_cli_razon_social), '-', '') AS nombre,

    /* Fecha nacimiento (v1) con 1900-01-01 como nulo */
    CASE 
      WHEN TRUNC(m.exrf_fecha_nacim) = TO_DATE('01/01/1900','dd/mm/yyyy') THEN NULL
      ELSE TO_CHAR(m.exrf_fecha_nacim, 'dd/mm/yyyy')
    END AS fecha_nacimiento,

    /* Teléfono preferente: celular_unificado o teléfono residencia */
    CASE 
      WHEN cu2.celular_unificado IS NOT NULL THEN cu2.celular_unificado
      ELSE NULLIF(TRIM(m.exrf_telefono_residencia), '')
    END AS telefono_contacto,

    /* Correo desde CTE correos */
    NULLIF(TRIM(cu.correo_unificado), '') AS correo,

    /* Si todo es 0, tratamos financieros como NULL (sin info) */
    CASE 
      WHEN m.exrf_vlr_activos  = 0 AND m.exrf_vlr_pasivos = 0 
       AND m.exrf_vlr_ingresos = 0 AND m.exrf_vlr_egresos = 0 
      THEN NULL ELSE m.exrf_vlr_activos 
    END AS vlr_activos,

    CASE 
      WHEN m.exrf_vlr_activos  = 0 AND m.exrf_vlr_pasivos = 0 
       AND m.exrf_vlr_ingresos = 0 AND m.exrf_vlr_egresos = 0 
      THEN NULL ELSE m.exrf_vlr_pasivos 
    END AS vlr_pasivos,

    CASE 
      WHEN m.exrf_vlr_activos  = 0 AND m.exrf_vlr_pasivos = 0 
       AND m.exrf_vlr_ingresos = 0 AND m.exrf_vlr_egresos = 0 
      THEN NULL ELSE m.exrf_vlr_ingresos 
    END AS vlr_ingresos,

    CASE 
      WHEN m.exrf_vlr_activos  = 0 AND m.exrf_vlr_pasivos = 0 
       AND m.exrf_vlr_ingresos = 0 AND m.exrf_vlr_egresos = 0 
      THEN NULL ELSE m.exrf_vlr_egresos 
    END AS vlr_egresos,

    /* Fecha de vinculación como string; 1900-01-01 = faltante */
    TO_CHAR(
      NVL(m.exrf_fecha_creacion_terc, TO_DATE('01/01/1900','dd/mm/yyyy')), 
      'dd/mm/yyyy'
    ) AS fecha_vinculacion_cliente,

    /* Metadatos de póliza (si aplica) */
    p.NUM_POL1,
    p.cod_ramo  AS COD_PROD,
    p.COD_SECC  AS COD_RAMO,
    TO_CHAR(p.FECHA_VENC_POL, 'dd/mm/yyyy') AS fecha_venc_pol,

    /* Fecha nacimiento alternativa desde PN/PJ (v2) */
    CASE 
      WHEN TRUNC(n2.fecha_nacimiento) = TO_DATE('01/01/1900','dd/mm/yyyy') THEN NULL
      WHEN TRUNC(j2.fecha_nacimiento) = TO_DATE('01/01/1900','dd/mm/yyyy') THEN NULL
      ELSE TO_CHAR(COALESCE(n2.fecha_nacimiento, j2.fecha_nacimiento), 'dd/mm/yyyy')
    END AS fecha_nacimiento_2

  FROM dc_ext_revisoria_fiscal m
  LEFT JOIN CORREOS_UNIFICADOS cu 
    ON cu.numero_documento = m.exrf_num_id_cliente
   AND cu.tipo_documento   = m.exrf_cod_tip_doc
  LEFT JOIN POLIZA_UNICA p
    ON p.COD_CIA      = m.exrf_cod_cia
   AND p.tdoc_tercero = m.exrf_cod_tip_doc
   AND p.nro_documto  = m.exrf_num_id_cliente
  LEFT JOIN CELULAR_UNIFICADO cu2
    ON cu2.numero_documento = m.exrf_num_id_cliente
   AND cu2.tipo_documento   = m.exrf_cod_tip_doc
  LEFT JOIN naturales n2 
    ON n2.numero_documento = m.exrf_num_id_cliente
   AND n2.tipdoc_codigo    = m.exrf_cod_tip_doc
  LEFT JOIN juridicos j2 
    ON j2.numero_documento = m.exrf_num_id_cliente
   AND j2.tipdoc_codigo    = m.exrf_cod_tip_doc
  WHERE 
    m.exrf_cod_tipo_persona IS NOT NULL
    AND m.exrf_cod_tip_doc  IS NOT NULL
    AND (
      m.exrf_cod_cia IN (1, 2)
      OR (m.exrf_cod_cia = 3 AND p.COD_RAMO IS NOT NULL)
    )
),

/* ============================================================
   5) CTE VALIDACIONES
   - Flags de faltante / válido / inválido por variable.
   ============================================================ */
VALIDACIONES AS (
  SELECT
    b.*,

    /* nombre */
    CASE WHEN b.nombre IS NULL OR TRIM(b.nombre) = '' THEN 1 ELSE 0 END AS nombre_faltante,
    CASE WHEN b.nombre IS NOT NULL AND LENGTH(TRIM(b.nombre)) >= 3 THEN 1 ELSE 0 END AS nombre_valido,

    /* fecha_nacimiento_2 (faltante; sin rango de edad por ahora) */
    CASE WHEN b.fecha_nacimiento_2 IS NULL OR TRIM(b.fecha_nacimiento_2) = '' THEN 1 ELSE 0 END AS fn2_faltante,
    CASE WHEN b.fecha_nacimiento_2 IS NOT NULL AND TRIM(b.fecha_nacimiento_2) <> '' THEN 1 ELSE 0 END AS fn2_valido,

    /* teléfono: válido si 10 dígitos exactos */
    CASE WHEN b.telefono_contacto IS NULL OR TRIM(b.telefono_contacto) = '' THEN 1 ELSE 0 END AS tel_faltante,
    CASE WHEN b.telefono_contacto IS NOT NULL AND REGEXP_LIKE(TRIM(b.telefono_contacto), '^[0-9]{10}$') THEN 1 ELSE 0 END AS tel_valido,
    CASE WHEN b.telefono_contacto IS NOT NULL AND NOT REGEXP_LIKE(TRIM(b.telefono_contacto), '^[0-9]{10}$') THEN 1 ELSE 0 END AS tel_invalido,

    /* correo: regex estándar */
    CASE WHEN b.correo IS NULL OR TRIM(b.correo) = '' THEN 1 ELSE 0 END AS correo_faltante,
    CASE WHEN b.correo IS NOT NULL AND REGEXP_LIKE(TRIM(b.correo),
         '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$') THEN 1 ELSE 0 END AS correo_valido,
    CASE WHEN b.correo IS NOT NULL AND NOT REGEXP_LIKE(TRIM(b.correo),
         '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$') THEN 1 ELSE 0 END AS correo_invalido,

    /* financieros: faltante si NULL; inválido si negativo */
    CASE WHEN b.vlr_activos  IS NULL THEN 1 ELSE 0 END AS act_faltante,
    CASE WHEN b.vlr_activos  IS NOT NULL AND b.vlr_activos  < 0 THEN 1 ELSE 0 END AS act_invalido,

    CASE WHEN b.vlr_pasivos  IS NULL THEN 1 ELSE 0 END AS pas_faltante,
    CASE WHEN b.vlr_pasivos  IS NOT NULL AND b.vlr_pasivos  < 0 THEN 1 ELSE 0 END AS pas_invalido,

    CASE WHEN b.vlr_ingresos IS NULL THEN 1 ELSE 0 END AS ing_faltante,
    CASE WHEN b.vlr_ingresos IS NOT NULL AND b.vlr_ingresos < 0 THEN 1 ELSE 0 END AS ing_invalido,

    CASE WHEN b.vlr_egresos  IS NULL THEN 1 ELSE 0 END AS egr_faltante,
    CASE WHEN b.vlr_egresos  IS NOT NULL AND b.vlr_egresos  < 0 THEN 1 ELSE 0 END AS egr_invalido,

    /* fecha vinculación: faltante si NULL/''/1900-01-01 */
    CASE WHEN b.fecha_vinculacion_cliente IS NULL 
           OR TRIM(b.fecha_vinculacion_cliente) = '' 
           OR b.fecha_vinculacion_cliente = '01/01/1900'
         THEN 1 ELSE 0 END AS fv_faltante,
    CASE WHEN b.fecha_vinculacion_cliente IS NOT NULL 
           AND TRIM(b.fecha_vinculacion_cliente) <> '' 
           AND b.fecha_vinculacion_cliente <> '01/01/1900'
         THEN 1 ELSE 0 END AS fv_valido

  FROM BASE b
)

/* ============================================================
   6) SALIDA FINAL POR VARIABLE
   - Sin compañía en SELECT/AGRUPACIÓN.
   - Columnas: tipo_persona, variable, total_registros, completos,
               faltantes, invalidos.
   ============================================================ */
SELECT *
FROM (
  /* NOMBRE */
  SELECT
    v.tipo_persona,
    'nombre' AS variable,
    COUNT(*) AS total_registros,
    SUM(CASE WHEN v.nombre_valido    = 1 THEN 1 ELSE 0 END) AS completos,
    SUM(CASE WHEN v.nombre_faltante  = 1 THEN 1 ELSE 0 END) AS faltantes,
    SUM(CASE WHEN v.nombre_faltante  = 0 AND v.nombre_valido = 0 THEN 1 ELSE 0 END) AS invalidos
  FROM VALIDACIONES v
  GROUP BY v.tipo_persona

  UNION ALL
  /* FECHA_NACIMIENTO_2 */
  SELECT
    v.tipo_persona,
    'fecha_nacimiento_2' AS variable,
    COUNT(*) AS total_registros,
    SUM(CASE WHEN v.fn2_valido   = 1 THEN 1 ELSE 0 END) AS completos,
    SUM(CASE WHEN v.fn2_faltante = 1 THEN 1 ELSE 0 END) AS faltantes,
    0 AS invalidos
  FROM VALIDACIONES v
  GROUP BY v.tipo_persona

  UNION ALL
  /* TELEFONO_CONTACTO */
  SELECT
    v.tipo_persona,
    'telefono_contacto' AS variable,
    COUNT(*) AS total_registros,
    SUM(CASE WHEN v.tel_valido   = 1 THEN 1 ELSE 0 END) AS completos,
    SUM(CASE WHEN v.tel_faltante = 1 THEN 1 ELSE 0 END) AS faltantes,
    SUM(CASE WHEN v.tel_invalido = 1 THEN 1 ELSE 0 END) AS invalidos
  FROM VALIDACIONES v
  GROUP BY v.tipo_persona

  UNION ALL
  /* CORREO */
  SELECT
    v.tipo_persona,
    'correo' AS variable,
    COUNT(*) AS total_registros,
    SUM(CASE WHEN v.correo_valido   = 1 THEN 1 ELSE 0 END) AS completos,
    SUM(CASE WHEN v.correo_faltante = 1 THEN 1 ELSE 0 END) AS faltantes,
    SUM(CASE WHEN v.correo_invalido = 1 THEN 1 ELSE 0 END) AS invalidos
  FROM VALIDACIONES v
  GROUP BY v.tipo_persona

  UNION ALL
  /* VLR_ACTIVOS */
  SELECT
    v.tipo_persona,
    'vlr_activos' AS variable,
    COUNT(*) AS total_registros,
    SUM(CASE WHEN v.act_faltante = 0 AND v.act_invalido = 0 THEN 1 ELSE 0 END) AS completos,
    SUM(CASE WHEN v.act_faltante = 1 THEN 1 ELSE 0 END) AS faltantes,
    SUM(CASE WHEN v.act_invalido  = 1 THEN 1 ELSE 0 END) AS invalidos
  FROM VALIDACIONES v
  GROUP BY v.tipo_persona

  UNION ALL
  /* VLR_PASIVOS */
  SELECT
    v.tipo_persona,
    'vlr_pasivos' AS variable,
    COUNT(*) AS total_registros,
    SUM(CASE WHEN v.pas_faltante = 0 AND v.pas_invalido = 0 THEN 1 ELSE 0 END) AS completos,
    SUM(CASE WHEN v.pas_faltante = 1 THEN 1 ELSE 0 END) AS faltantes,
    SUM(CASE WHEN v.pas_invalido  = 1 THEN 1 ELSE 0 END) AS invalidos
  FROM VALIDACIONES v
  GROUP BY v.tipo_persona

  UNION ALL
  /* VLR_INGRESOS */
  SELECT
    v.tipo_persona,
    'vlr_ingresos' AS variable,
    COUNT(*) AS total_registros,
    SUM(CASE WHEN v.ing_faltante = 0 AND v.ing_invalido = 0 THEN 1 ELSE 0 END) AS completos,
    SUM(CASE WHEN v.ing_faltante = 1 THEN 1 ELSE 0 END) AS faltantes,
    SUM(CASE WHEN v.ing_invalido  = 1 THEN 1 ELSE 0 END) AS invalidos
  FROM VALIDACIONES v
  GROUP BY v.tipo_persona

  UNION ALL
  /* VLR_EGRESOS */
  SELECT
    v.tipo_persona,
    'vlr_egresos' AS variable,
    COUNT(*) AS total_registros,
    SUM(CASE WHEN v.egr_faltante = 0 AND v.egr_invalido = 0 THEN 1 ELSE 0 END) AS completos,
    SUM(CASE WHEN v.egr_faltante = 1 THEN 1 ELSE 0 END) AS faltantes,
    SUM(CASE WHEN v.egr_invalido  = 1 THEN 1 ELSE 0 END) AS invalidos
  FROM VALIDACIONES v
  GROUP BY v.tipo_persona

  UNION ALL
  /* FECHA_VINCULACION_CLIENTE */
  SELECT
    v.tipo_persona,
    'fecha_vinculacion_cliente' AS variable,
    COUNT(*) AS total_registros,
    SUM(CASE WHEN v.fv_valido   = 1 THEN 1 ELSE 0 END) AS completos,
    SUM(CASE WHEN v.fv_faltante = 1 THEN 1 ELSE 0 END) AS faltantes,
    0 AS invalidos
  FROM VALIDACIONES v
  GROUP BY v.tipo_persona
)
ORDER BY 1, 2;
