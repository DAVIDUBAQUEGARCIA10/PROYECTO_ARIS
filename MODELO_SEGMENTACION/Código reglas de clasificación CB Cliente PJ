CREATE OR REPLACE TABLE `sb-sandbox-usuarios.sandbox_cumplimiento.t_prueba_CB_ClientesPJ` AS 

(WITH 
movimientos AS (
    SELECT
        CAST(o.TIPO_DOCUMENTO AS STRING) AS TIPO_DOCUMENTO_TOMADOR,
        CAST(o.KEY_ID_TOMADOR AS STRING) AS NUMERO_DOCUMENTO_TOMADOR,
        m.CODIGO_COMPANIA,
        m.FECHA_TRANSACCION,
        SUM(CASE WHEN m.CODIGO_TIPO_MOVIMIENTO IN (26,115,139,29,25,31,34,30,32,36,33,183,180,191,27,35) THEN m.VALOR_TRANSACCION ELSE 0 END) AS total_retiros,
        SUM(CASE WHEN m.CODIGO_TIPO_MOVIMIENTO = 36 THEN m.VALOR_TRANSACCION ELSE 0 END) AS total_sorteos
    FROM `sb-ecosistemaanalitico-lago.capitalizadora.t_movimientos_capitalizadora` AS m
    JOIN `sb-ecosistemaanalitico-lago.capitalizadora.t_operaciones_titulos` AS o
        ON m.NUMERO_TITULO = o.NUMERO_TITULO
    WHERE m.CODIGO_COMPANIA = 1
        AND EXTRACT(YEAR FROM m.FECHA_TRANSACCION) = EXTRACT(YEAR FROM DATE_SUB(DATE_TRUNC(CURRENT_DATE(), MONTH), INTERVAL 12 MONTH))
    GROUP BY 1, 2, 3, 4
),

Ingresos_Activos AS (
    SELECT *,
        NULLIF(VALOR_INGRESOS, 0) / NULLIF(VALOR_EGRESOS, 0) AS ratio_ingresos_egresos,
        NULLIF(VALOR_ACTIVO, 0) / NULLIF(VALOR_PASIVO, 0) AS ratio_activo_pasivo
    FROM `sb-ecosistemaanalitico-lago.seguros_bolivar.t_clientes_naturales`
),

regla_1 AS(
  SELECT 
    c.TIPO_DOCUMENTO,
    c.KEY_ID,
      CASE
        WHEN ratio_activo_pasivo <= 6.322 THEN
          CASE
            WHEN c.ratio_ingresos_egresos <= 3.333 THEN
              CASE
                WHEN sc.NIVEL_DE_RIESGO IN ('Riesgo Alto') AND sc.CODIGO_ENTIDAD_COMPANIA = 1 THEN 
                  CASE 
                    WHEN COALESCE(m.total_retiros, 0) <= -46988725 THEN '2 - 1.1'
                    WHEN COALESCE(m.total_retiros, 0) > -46988725 AND COALESCE(m.total_retiros, 0) <= -3402615 THEN '10 - 1.2'
                    WHEN COALESCE(m.total_retiros, 0) > -3402615 AND COALESCE(m.total_retiros, 0) <= -1750000 THEN '3 - 1.3'
                    WHEN COALESCE(m.total_retiros, 0) > -1750000 THEN '10 - 1.4'
                  END
                WHEN sc.NIVEL_DE_RIESGO IN ('Riesgo Medio','Riesgo Bajo') AND sc.CODIGO_ENTIDAD_COMPANIA = 1 THEN 
                  CASE
                    WHEN COALESCE(m.total_sorteos, 0) <= 0 THEN '9 - 1.5'
                    WHEN COALESCE(m.total_sorteos, 0) > 0 THEN '3 - 1.6'
                  END
              END
            WHEN c.ratio_ingresos_egresos <= 3.333 THEN '8 - 1.7'          
          END
        ELSE 'No Segmentado'
      END AS segmento
FROM Ingresos_Activos c
LEFT JOIN `sb-sandbox-usuarios.sandbox_cumplimiento.t_score_clientes` sc
  ON c.TIPO_DOCUMENTO = sc.TIPO_DOCUMENTO AND c.KEY_ID = sc.KEY_ID
LEFT JOIN movimientos m
  ON c.TIPO_DOCUMENTO = m.TIPO_DOCUMENTO_TOMADOR AND c.KEY_ID = m.NUMERO_DOCUMENTO_TOMADOR
),

regla_2 AS(
  SELECT 
    c.TIPO_DOCUMENTO,
    c.KEY_ID,
      CASE
        WHEN ratio_activo_pasivo > 6.322 THEN '7 - 2.1' 
        ELSE 'No Segmentado'
      END AS segmento
FROM Ingresos_Activos c
LEFT JOIN `sb-sandbox-usuarios.sandbox_cumplimiento.t_score_clientes` sc
  ON c.TIPO_DOCUMENTO = sc.TIPO_DOCUMENTO AND c.KEY_ID = sc.KEY_ID
LEFT JOIN movimientos m
  ON c.TIPO_DOCUMENTO = m.TIPO_DOCUMENTO_TOMADOR AND c.KEY_ID = m.NUMERO_DOCUMENTO_TOMADOR
)

SELECT DISTINCT reglas.TIPO_DOCUMENTO, reglas.KEY_ID, reglas.segmento
FROM (
SELECT TIPO_DOCUMENTO, KEY_ID, segmento FROM regla_1
UNION ALL
SELECT TIPO_DOCUMENTO, KEY_ID, segmento FROM regla_2
) AS reglas
INNER JOIN 
    `sb-ecosistemaanalitico-lago.capitalizadora_full.t_clientes_capitalizadora` til
ON 
    LOWER(reglas.TIPO_DOCUMENTO) = LOWER(til.tipo_documento)
    AND reglas.KEY_ID = til.key_id
WHERE date(fecha_corte) >= DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH), MONTH) 
AND til.tipo_documento NOT IN ('CC', 'PP', 'RC', 'CE', 'TI', 'PE', 'PT', 'CF', 'CD', 'RE', 'CI', 'SD'))

------------------------ Código para asignar segmentos por reglas

SELECT segmento, COUNT(*) AS total_clientes
FROM `sb-sandbox-usuarios.sandbox_cumplimiento.t_prueba_CB_ClientesPJ`
GROUP BY segmento
ORDER BY total_clientes DESC;

------------------------------

CREATE OR REPLACE TABLE `sb-sandbox-usuarios.sandbox_cumplimiento.t_prueba_CB_ClientesPJ_full` AS 

WITH datos AS (
    SELECT 
        *,  
        CASE 
            WHEN segmento IS NULL OR segmento = 'No Segmentado' THEN 'No Segmentado'
            ELSE SPLIT(segmento, ' - ')[SAFE_OFFSET(0)]
        END AS SEGMENTO_1,
        CASE 
            WHEN segmento IS NULL OR segmento = 'No Segmentado' THEN 100
            ELSE CAST(SPLIT(segmento, ' - ')[SAFE_OFFSET(1)] AS FLOAT64)
        END AS NIVEL_DE_PRIORIDAD
    FROM `sb-sandbox-usuarios.sandbox_cumplimiento.t_prueba_CB_ClientesPJ`
),
ordenado AS (
    SELECT *,
           ROW_NUMBER() OVER (PARTITION BY KEY_ID ORDER BY NIVEL_DE_PRIORIDAD ASC) AS fila
    FROM datos
)
SELECT *
FROM ordenado
WHERE fila = 1;

-------------------------------- Código para asignar segmento definitivo con base en arbol de decisión

SELECT SEGMENTO_1, COUNT(*) AS total_clientes
FROM `sb-sandbox-usuarios.sandbox_cumplimiento.t_prueba_CB_ClientesPJ_full`
GROUP BY SEGMENTO_1
ORDER BY total_clientes DESC;



